function w(n){const r=new Uint8Array(n);return h(r)}function h(n){let r="";const a=n.byteLength;for(let e=0;e<a;++e)r+=String.fromCharCode(n[e]);return window.btoa(r)}async function g(n){return w(await(await fetch(n)).arrayBuffer())}const m=n=>new Promise(async(r,a)=>{try{var e=new FileReader;e.readAsDataURL(n),e.onloadend=()=>{const o=e.result,c=o.substring(o.indexOf(",")+1);r(c)}}catch(o){a(o)}}),y=n=>{const r=atob(n),a=new Uint8Array(r.length);for(let e=0;e<a.length;++e)a[e]=r.charCodeAt(e);return a},B=(n,r)=>{const a=y(n);return new Blob([a.buffer],{type:r})};class C{static async encode(r,a){return new Promise(async(e,o)=>{var c=new FileReader;c.onload=async l=>{try{const f=new AudioContext;if(l.target===null){o(new Error("Could not obtain buffer to encode"));return}const s=await f.decodeAudioData(l.target.result),d=[];for(let t=0;t<s.numberOfChannels;++t)d.push(s.getChannelData(t));const i=a(),u=i instanceof Worker?i:await i;u.postMessage({command:"encode",audioBuffer:{channels:d,numberOfChannels:s.numberOfChannels,length:s.length,sampleRate:s.sampleRate}}),u.onmessage=t=>{e(new Blob(t.data.buffer,{type:"audio/mp3"})),u.terminate()},u.onerror=t=>{const b=(t==null?void 0:t.error)??new Error("MP3 encoding failed: "+(t==null?void 0:t.message));o(b),u.terminate()}}catch(f){o(f)}},c.readAsArrayBuffer(r)})}}export{C as M,B as a,w as b,m as c,g as u};
